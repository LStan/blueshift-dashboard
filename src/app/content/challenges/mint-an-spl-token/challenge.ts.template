/** Challenge: Mint an SPL Token
 *
 * In this challenge, you will create an SPL token on the Solana blockchain.
 * You will mint a total of 21,000,000 tokens with 6 decimals to your associated token account.
 *
 * Steps:
 * 1. Create an SPL mint account.
 * 2. Initialize the mint with 6 decimals and your public key as the mint authority.
 * 3. Create an associated token account for your public key to hold the minted tokens.
 * 4. Mint 21,000,000 tokens to your associated token account.
 */

import {
  Keypair,
  Connection,
  sendAndConfirmTransaction,
  SystemProgram,
  Transaction,
} from "@solana/web3.js";

import {
  createAssociatedTokenAccountInstruction,
  createInitializeMint2Instruction,
  createMintToInstruction,
  createMintToCheckedInstruction,
  MINT_SIZE,
  getMinimumBalanceForRentExemptMint,
  TOKEN_PROGRAM_ID,
  getAssociatedTokenAddressSync,

  ASSOCIATED_TOKEN_PROGRAM_ID
} from "@solana/spl-token";

import bs58 from "bs58";

// Import our keypair from the wallet file
const feePayer = Keypair.fromSecretKey(
  // ⚠️ INSECURE KEY. DO NOT USE OUTSIDE OF THIS CHALLENGE
  bs58.decode(process.env.SECRET)
);

//Create a connection to the RPC endpointks
const connection = new Connection(
  process.env.RPC_ENDPOINT,
  "confirmed"
);

// Entry point of your TypeScript code (we will call this)
async function main() {
  try {
    // Start here
    // const mint = ???

    const mint = Keypair.generate();

    const mintRent = await getMinimumBalanceForRentExemptMint(connection);

    // Create the mint account
    // const createAccountIx = ???


    // Initialize the mint account
    // const initializeMintIx = ???


    // Create the associated token account
    // const associatedTokenAccount = ???
    // const createAssociatedTokenAccountIx = ???


    // Mint 21,000,000 tokens to the associated token account
    // const mintAmount = ???
    // const mintToCheckedIx = ???


    const recentBlockhash = await connection.getLatestBlockhash();

    const transaction = new Transaction({
      feePayer: feePayer.publicKey,
      blockhash: recentBlockhash.blockhash,
      lastValidBlockHeight: recentBlockhash.lastValidBlockHeight
    }).add(
        createAccountIx,
        initializeMintIx,
        createAssociatedTokenAccountIx,
        mintToCheckedIx
    );

    const transactionSignature = await sendAndConfirmTransaction(
      connection,
      transaction,
      [feePayer, mint]
    );

    console.log("Mint Address:", mint.publicKey.toBase58());
    console.log("Transaction Signature:", transactionSignature);
  } catch (error) {
    console.error(`Oops, something went wrong: ${error}`);
  }
}
